const state = require('./state');

// –¢–∏–ø—ã —Ä–µ—Å—É—Ä—Å–æ–≤
const RESOURCE_TYPES = [
  { type: 'bronze',       points: 1,  rarity: 0.35, color: '#B8621E', symbol: 'ü™ô' }, // –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ—Å—É—Ä—Å
  { type: 'silver',       points: 2,  rarity: 0.25, color: '#C0C0C0', symbol: 'üíµ' }, // –ß–∞—Å—Ç—ã–π
  { type: 'gold',         points: 3,  rarity: 0.15, color: '#FFD700', symbol: 'üí∞' }, // –•–æ—Ä–æ—à–∏–π
  { type: 'doublePoints', points: 0,  rarity: 0.10, color: '#FFE55C', symbol: '‚ú®', effect: 'doublePoints' }, // –ü–æ–ª–µ–∑–Ω—ã–π –±–∞—Ñ
  { type: 'magnet',       points: 0,  rarity: 0.06, color: '#FF4444', symbol: 'üß≤', effect: 'magnet' }, // –†–µ–¥–∫–∏–π –±–∞—Ñ
  { type: 'teleport',     points: 0,  rarity: 0.04, color: '#9966FF', symbol: 'üåÄ', effect: 'teleport' }, // –≠—Å–∫–µ–π–ø
  { type: 'timeBomb',     points: 4,  rarity: 0.025, color: '#FF0000', symbol: 'üí£', effect: 'timeBomb' }, // –†–∏—Å–∫/–Ω–∞–≥—Ä–∞–¥–∞
  { type: 'confusionTrap', points: 0, rarity: 0.01, color: '#FF69B4', symbol: 'üòµ', effect: 'confusion' }, // –õ–æ–≤—É—à–∫–∞ –ø—É—Ç–∞–Ω–∏—Ü—ã
  { type: 'freezeTrap',   points: 0,  rarity: 0.008, color: '#00BFFF', symbol: 'üßä', effect: 'freeze' }, // –†–µ–¥–∫–∞—è –ª–æ–≤—É—à–∫–∞  
  { type: 'poisonTrap',   points: -2, rarity: 0.007, color: '#32CD32', symbol: '‚ò£Ô∏è', effect: 'poison' }, // –Ø–¥–æ–≤–∏—Ç–∞—è –ª–æ–≤—É—à–∫–∞
  { type: 'diamond',      points: 10, rarity: 0.005, color: '#68dbfaff', symbol: 'üíé' }, // –î–∂–µ–∫–ø–æ—Ç
];

let spawnIntervalId = null;
let cleanupIntervalId = null;
let magnetIntervalId = null; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞–≥–Ω–∏—Ç–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
let bombIntervalId = null; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–º–±
let poisonIntervalId = null; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —è–¥–∞

function pickResourceTypeWeighted() {
  const r = Math.random();
  let acc = 0;
  let selected = RESOURCE_TYPES[RESOURCE_TYPES.length - 1];
  
  for (const t of RESOURCE_TYPES) {
    acc += t.rarity;
    if (r <= acc) {
      selected = t;
      break;
    }
  }
  
  return selected;
}

function spawnResource(io) {
  if (state.getGameStatus() !== 'started' || state.isGamePaused()) return;

  const selected = pickResourceTypeWeighted();
  const players = state.getPlayers();
  const resources = state.getResources();

  // –ù–µ —Å–ø–∞–≤–Ω–∏—Ç—å –ø–æ–≤–µ—Ä—Ö –∏–≥—Ä–æ–∫–∞/–¥—Ä—É–≥–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ (–¥–æ 20 –ø–æ–ø—ã—Ç–æ–∫)
  for (let tries = 0; tries < 20; tries++) {
    const x = Math.floor(Math.random() * 20);
    const y = Math.floor(Math.random() * 20);

    const occupiedByPlayer = Object.values(players).some(p => p.x === x && p.y === y);
    const occupiedByResource = resources.some(res => res.x === x && res.y === y);
    
    if (occupiedByPlayer || occupiedByResource) continue;

    const resource = {
      x,
      y,
      type: selected.type,
      points: selected.points,
      color: selected.color,
      symbol: selected.symbol,
      effect: selected.effect, // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
      spawnTime: Date.now() // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–ø–∞–≤–Ω–∞
    };
    
    // –ï—Å–ª–∏ —ç—Ç–æ –±–æ–º–±–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –≤–∑—Ä—ã–≤–∞
    if (selected.type === 'timeBomb') {
      // –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –≤–∑—Ä—ã–≤–∞ –æ—Ç 1 –¥–æ 6 —Å–µ–∫—É–Ω–¥
      const randomTime = Math.floor(Math.random() * 6000) + 1000; // 1000-6000 –º—Å
      resource.explodeTime = Date.now() + randomTime;
      resource.isBlinking = true; // –§–ª–∞–≥ –¥–ª—è –º–∏–≥–∞–Ω–∏—è
      resource.canDeactivate = true; // –§–ª–∞–≥ —á—Ç–æ –±–æ–º–±—É –º–æ–∂–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
    }
    
    state.addResource(resource);
    io.emit('updateResources', state.getResources());
    return;
  }
}

function startSpawning(io) {
  stopSpawning();
  spawnIntervalId = setInterval(() => spawnResource(io), 2000);
  // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
  cleanupIntervalId = setInterval(() => cleanupExpiredResources(io), 10000);
  // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –º–∞–≥–Ω–∏—Ç–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 500–º—Å –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
  magnetIntervalId = setInterval(() => processMagnetEffects(io), 500);
  // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –±–æ–º–± –∫–∞–∂–¥—ã–µ 100–º—Å –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
  bombIntervalId = setInterval(() => processBombEffects(io), 100);
  // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —è–¥–∞ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
  poisonIntervalId = setInterval(() => processPoisonEffects(io), 2000);
}

function stopSpawning() {
  if (spawnIntervalId) {
    clearInterval(spawnIntervalId);
    spawnIntervalId = null;
  }
  if (cleanupIntervalId) {
    clearInterval(cleanupIntervalId);
    cleanupIntervalId = null;
  }
  if (magnetIntervalId) {
    clearInterval(magnetIntervalId);
    magnetIntervalId = null;
  }
  if (bombIntervalId) {
    clearInterval(bombIntervalId);
    bombIntervalId = null;
  }
  if (poisonIntervalId) {
    clearInterval(poisonIntervalId);
    poisonIntervalId = null;
  }
}

function cleanupExpiredResources(io) {
  if (state.getGameStatus() !== 'started' || state.isGamePaused()) return;
  
  const resources = state.getResources();
  const currentTime = Date.now();
  const RESOURCE_LIFETIME = 7000; // 7 —Å–µ–∫—É–Ω–¥ –∂–∏–∑–Ω–∏ —Ä–µ—Å—É—Ä—Å–∞
  
  const validResources = resources.filter(res => {
    return (currentTime - res.spawnTime) < RESOURCE_LIFETIME;
  });
  
  // –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  if (validResources.length < resources.length) {
    state.setResources(validResources);
    io.emit('updateResources', validResources);
  }
}

function collectResource(playerX, playerY, player) {
  const resources = state.getResources();
  let collected = false;
  let collectedPoints = 0;
  let hasEffect = false;
  let effectType = null;
  let bombDeactivated = false;

  const newResources = resources.filter((res) => {
    if (res.x === playerX && res.y === playerY) {
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –±–æ–º–±
      if (res.type === 'timeBomb' && res.canDeactivate) {
        bombDeactivated = true;
        collectedPoints += (res.points || 0);
        collected = true;
        // –î–ª—è –±–æ–º–± –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –≤–∑—Ä—ã–≤–∞, –∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏—Ö
        return false; // —É–¥–∞–ª–∏—Ç—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—É—é –±–æ–º–±—É
      } else if (res.type === 'timeBomb') {
        // –ï—Å–ª–∏ –±–æ–º–±–∞ —É–∂–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞, –Ω–µ –ø–æ–¥–±–∏—Ä–∞–µ–º –µ—ë
        return true; // –æ—Å—Ç–∞–≤–∏—Ç—å –±–æ–º–±—É
      } else {
        // –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        collectedPoints += (res.points || 0);
        collected = true;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
        if (res.effect) {
          hasEffect = true;
          effectType = res.effect;
        }
        
        return false; // —É–¥–∞–ª–∏—Ç—å —Å–æ–±—Ä–∞–Ω–Ω—ã–π
      }
    }
    return true;
  });

  if (collected) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –¥–≤–æ–π–Ω—ã—Ö –æ—á–∫–æ–≤
    const hasDoublePoints = player.doublePointsUntil && Date.now() < player.doublePointsUntil;
    const finalPoints = hasDoublePoints ? collectedPoints * 2 : collectedPoints;
    
    player.score += finalPoints;
    state.setResources(newResources);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å (–Ω–æ –Ω–µ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–æ–º–±)
    if (hasEffect && !bombDeactivated) {
      applyResourceEffect(player, effectType);
    }
  }

  return collected;
}

function applyResourceEffect(player, effectType) {
  switch (effectType) {
    case 'teleport':
      // –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞ –≤ —Å–ª—É—á–∞–π–Ω—É—é —Å–≤–æ–±–æ–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
      const players = state.getPlayers();
      const resources = state.getResources();
      
      // –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—É—é –ø–æ–∑–∏—Ü–∏—é (–¥–æ 50 –ø–æ–ø—ã—Ç–æ–∫)
      for (let tries = 0; tries < 50; tries++) {
        const newX = Math.floor(Math.random() * 20);
        const newY = Math.floor(Math.random() * 20);
        
        const occupiedByPlayer = Object.values(players).some(p => 
          p.id !== player.id && p.x === newX && p.y === newY
        );
        const occupiedByResource = resources.some(res => res.x === newX && res.y === newY);
        
        if (!occupiedByPlayer && !occupiedByResource) {
          player.x = newX;
          player.y = newY;
          break;
        }
      }
      break;
      
    case 'doublePoints':
      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç –¥–≤–æ–π–Ω—ã—Ö –æ—á–∫–æ–≤ –Ω–∞ 7 —Å–µ–∫—É–Ω–¥
      player.doublePointsUntil = Date.now() + 7000; // 7 —Å–µ–∫—É–Ω–¥
      break;
      
    case 'magnet':
      // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç –º–∞–≥–Ω–∏—Ç–∞ –Ω–∞ 6 —Å–µ–∫—É–Ω–¥
      player.magnetUntil = Date.now() + 6000; // 6 —Å–µ–∫—É–Ω–¥
      break;
      
    case 'freeze':
      // –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º –∏–≥—Ä–æ–∫–∞ –Ω–∞ 4 —Å–µ–∫—É–Ω–¥—ã
      player.frozenUntil = Date.now() + 4000; // 4 —Å–µ–∫—É–Ω–¥—ã
      break;
      
    case 'confusion':
      // –ü—É—Ç–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –Ω–∞ 6 —Å–µ–∫—É–Ω–¥
      player.confusedUntil = Date.now() + 6000; // 6 —Å–µ–∫—É–Ω–¥
      break;
      
    case 'poison':
      // –û—Ç—Ä–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –Ω–∞ 6 —Å–µ–∫—É–Ω–¥ (-1 –æ—á–∫–æ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã)
      player.poisonedUntil = Date.now() + 6000; // 6 —Å–µ–∫—É–Ω–¥
      player.lastPoisonDamage = Date.now(); // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Ä–æ–Ω–∞ –æ—Ç —è–¥–∞
      break;
      
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –≤ –±—É–¥—É—â–µ–º
    default:
      console.log(`Unknown effect: ${effectType}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞–≥–Ω–∏—Ç–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
function processMagnetEffects(io) {
  if (state.getGameStatus() !== 'started' || state.isGamePaused()) return;
  
  const players = state.getPlayers();
  let resources = state.getResources();
  let resourcesChanged = false;
  let playersChanged = false;
  
  // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º —Å –∞–∫—Ç–∏–≤–Ω—ã–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º –º–∞–≥–Ω–∏—Ç–∞
  Object.values(players).forEach(player => {
    if (player.magnetUntil && Date.now() < player.magnetUntil) {
      // –ù–∞—Ö–æ–¥–∏–º —Ä–µ—Å—É—Ä—Å—ã –≤ —Ä–∞–¥–∏—É—Å–µ 2 –∫–ª–µ—Ç–æ–∫ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ–º –∏—Ö
      const resourcesToCollect = [];
      
      resources.forEach((resource, index) => {
        const distance = Math.abs(resource.x - player.x) + Math.abs(resource.y - player.y);
        if (distance <= 3 && distance > 0) {
          // –ú–∞–≥–Ω–∏—Ç –Ω–µ –ø–æ–¥–±–∏—Ä–∞–µ—Ç –±–æ–º–±—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - —Å–ª–∏—à–∫–æ–º –æ–ø–∞—Å–Ω–æ!
          if (resource.type !== 'timeBomb') {
            resourcesToCollect.push(index);
          }
        }
      });
      
      // –°–æ–±–∏—Ä–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ–±—ã –Ω–µ —Å–±–∏–ª–∏—Å—å –∏–Ω–¥–µ–∫—Å—ã)
      for (let i = resourcesToCollect.length - 1; i >= 0; i--) {
        const resourceIndex = resourcesToCollect[i];
        const resource = resources[resourceIndex];
        
        // –ù–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏
        let points = resource.points || 0;
        const hasDoublePoints = player.doublePointsUntil && Date.now() < player.doublePointsUntil;
        const finalPoints = hasDoublePoints ? points * 2 : points;
        player.score += finalPoints;
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Ä–µ—Å—É—Ä—Å–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        if (resource.effect) {
          applyResourceEffect(player, resource.effect);
        }
        
        // –£–¥–∞–ª—è–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–π —Ä–µ—Å—É—Ä—Å
        resources.splice(resourceIndex, 1);
        resourcesChanged = true;
        playersChanged = true;
      }
    }
  });
  
  // –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  if (resourcesChanged) {
    state.setResources(resources);
    io.emit('updateResources', resources);
  }
  
  if (playersChanged) {
    io.emit('updatePlayers', state.getPlayers());
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ–º–± (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
function processBombEffects(io) {
  if (state.getGameStatus() !== 'started' || state.isGamePaused()) return;
  
  let resources = state.getResources();
  const players = state.getPlayers();
  let resourcesChanged = false;
  let playersChanged = false;
  const currentTime = Date.now();
  
  // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –±–æ–º–±–∞–º
  const bombsToExplode = [];
  resources.forEach((resource, index) => {
    if (resource.type === 'timeBomb' && resource.explodeTime <= currentTime) {
      bombsToExplode.push({ index, resource });
    }
  });
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∑—Ä—ã–≤—ã –±–æ–º–±
  for (let i = bombsToExplode.length - 1; i >= 0; i--) {
    const { index, resource: bomb } = bombsToExplode[i];
    
    // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω –∏–≥—Ä–æ–∫–∞–º –≤ —Ä–∞–¥–∏—É—Å–µ –≤–∑—Ä—ã–≤–∞
    Object.values(players).forEach(player => {
      const distance = Math.abs(bomb.x - player.x) + Math.abs(bomb.y - player.y);
      if (distance <= 3) {
        player.score = Math.max(0, player.score - 3); // –ù–µ –¥–∞–µ–º —Å—á–µ—Ç—É —É–π—Ç–∏ –≤ –º–∏–Ω—É—Å
        playersChanged = true;
      }
    });
    
    // –£–¥–∞–ª—è–µ–º –¥—Ä—É–≥–∏–µ —Ä–µ—Å—É—Ä—Å—ã –≤ —Ä–∞–¥–∏—É—Å–µ –≤–∑—Ä—ã–≤–∞
    const resourcesToRemove = [];
    resources.forEach((resource, resIndex) => {
      if (resIndex !== index) { // –ù–µ —É–¥–∞–ª—è–µ–º —Å–∞–º—É –±–æ–º–±—É –ø–æ–∫–∞
        const distance = Math.abs(bomb.x - resource.x) + Math.abs(bomb.y - resource.y);
        if (distance <= 3) {
          resourcesToRemove.push(resIndex);
        }
      }
    });
    
    // –£–¥–∞–ª—è–µ–º —Ä–µ—Å—É—Ä—Å—ã –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    resourcesToRemove.sort((a, b) => b - a).forEach(resIndex => {
      resources.splice(resIndex, 1);
      resourcesChanged = true;
    });
    
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å –±–æ–º–±—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    let correctedBombIndex = index;
    resourcesToRemove.forEach(removedIndex => {
      if (removedIndex < index) {
        correctedBombIndex--;
      }
    });
    
    // –£–¥–∞–ª—è–µ–º —Å–∞–º—É –±–æ–º–±—É
    resources.splice(correctedBombIndex, 1);
    resourcesChanged = true;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –≤–∑—Ä—ã–≤–∞ –∫–ª–∏–µ–Ω—Ç–∞–º
    io.emit('bombExplosion', { x: bomb.x, y: bomb.y });
  }
  
  // –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  if (resourcesChanged) {
    state.setResources(resources);
    io.emit('updateResources', resources);
  }
  
  if (playersChanged) {
    io.emit('updatePlayers', state.getPlayers());
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —è–¥–æ–≤–∏—Ç—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã)
function processPoisonEffects(io) {
  if (state.getGameStatus() !== 'started' || state.isGamePaused()) return;
  
  const players = state.getPlayers();
  let playersChanged = false;
  const currentTime = Date.now();
  
  // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º —Å –∞–∫—Ç–∏–≤–Ω—ã–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º —è–¥–∞
  Object.values(players).forEach(player => {
    if (player.poisonedUntil && currentTime < player.poisonedUntil) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 2 —Å–µ–∫—É–Ω–¥—ã —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Ä–æ–Ω–∞
      if (currentTime - (player.lastPoisonDamage || 0) >= 2000) {
        // –ù–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω –æ—Ç —è–¥–∞ (-1 –æ—á–∫–æ)
        player.score = Math.max(0, player.score - 1);
        player.lastPoisonDamage = currentTime;
        playersChanged = true;
      }
    }
  });
  
  // –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
  if (playersChanged) {
    io.emit('updatePlayers', state.getPlayers());
  }
}

module.exports = {
  RESOURCE_TYPES,
  spawnResource,
  startSpawning,
  stopSpawning,
  collectResource,
  pickResourceTypeWeighted,
  processMagnetEffects,
  processBombEffects,
  processPoisonEffects
};
