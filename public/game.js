document.addEventListener('DOMContentLoaded', () => {
  const socket = io();

  // --- –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ ---
  let paused = false;
  let playerName = '';
  let mySocketId = '';
  let currentHostId = '';
  let currentGameTime = 60;

  // ---- –†–µ–Ω–¥–µ—Ä-–ø–∞–π–ø–ª–∞–π–Ω ----
  const GRID_COLS = 20;
  let pending = { players: null, resources: null };
  let scheduled = false;

  const prevPlayerIndex = new Map(); // id -> –∏–Ω–¥–µ–∫—Å –∫–ª–µ—Ç–∫–∏ (y*20 + x)
  const resourceSet = new Set();     // "x,y" –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

  function scheduleRender() {
    if (scheduled) return;
    scheduled = true;
    requestAnimationFrame(() => {
      scheduled = false;
      renderFrame();
    });
  }

  function renderFrame() {
    // –ò–≥—Ä–æ–∫–∏: —Ç–æ–ª—å–∫–æ –¥–∏—Ñ—Ñ –ø–æ–∑–∏—Ü–∏–π
    if (pending.players) {
      // —Å–Ω—è—Ç—å –ø—Ä–æ—à–ª—ã–µ –ø–æ–∑–∏—Ü–∏–∏
      for (const [id, oldIdx] of prevPlayerIndex) {
        const oldCell = board.children[oldIdx];
        if (oldCell) {
          oldCell.classList.remove('player');
          oldCell.style.backgroundColor = '';
          oldCell.title = '';
        }
      }
      prevPlayerIndex.clear();

      // –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ
      Object.values(pending.players).forEach(p => {
        const idx = p.y * GRID_COLS + p.x;
        const cell = board.children[idx];
        if (cell) {
          cell.classList.add('player');
          cell.style.backgroundColor = p.color;
          cell.title = p.name;
          prevPlayerIndex.set(p.id, idx);
        }
      });

      // —Ç–∞–±–ª–æ (–æ–¥–Ω–∏–º innerHTML –∑–∞ –∫–∞–¥—Ä)
      scoreboard.innerHTML = '<b>Scores:</b><br>' +
        Object.values(pending.players)
          .map(p => `
            <span style="display:inline-block;width:14px;height:14px;background:${p.color};border:1px solid #000;margin-right:5px;"></span>
            ${p.name}: ${p.score}
          `).join('<br>');

      pending.players = null; // –æ—Ç—Ä–∏—Å–æ–≤–∞–ª–∏ ‚Äî —Å–±—Ä–æ—Å–∏–ª–∏
    }

    // –†–µ—Å—É—Ä—Å—ã: –¥–∏—Ñ—Ñ –ø–æ –º–Ω–æ–∂–µ—Å—Ç–≤—É
    if (pending.resources) {
      // —É–±—Ä–∞—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ
      const nextSet = new Set(pending.resources.map(r => `${r.x},${r.y}`));
      if (resourceSet.size) {
        for (const key of resourceSet) {
          if (!nextSet.has(key)) {
            const [x, y] = key.split(',').map(Number);
            const idx = y * GRID_COLS + x;
            const cell = board.children[idx];
            if (cell) cell.classList.remove('resource');
          }
        }
      }
      // –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ
      for (const key of nextSet) {
        if (!resourceSet.has(key)) {
          const [x, y] = key.split(',').map(Number);
          const idx = y * GRID_COLS + x;
          const cell = board.children[idx];
          if (cell) cell.classList.add('resource');
        }
      }
      resourceSet.clear();
      nextSet.forEach(k => resourceSet.add(k));
      pending.resources = null;
    }
  }

  // ---- FPS overlay (–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞) ----
  let frames = 0, fps = 0, lastFpsTs = performance.now();
  const fpsEl = document.createElement('div');
  fpsEl.style.cssText = 'position:fixed;left:8px;bottom:8px;background:rgba(0,0,0,.6);color:#0f0;padding:4px 6px;border-radius:4px;font:12px/1 monospace;z-index:9999';
  fpsEl.textContent = 'FPS: --';
  document.body.appendChild(fpsEl);

  (function fpsLoop(ts) {
    frames++;
    if (ts - lastFpsTs >= 1000) {
      fps = frames; frames = 0; lastFpsTs = ts;
      fpsEl.textContent = 'FPS: ' + fps;
    }
    requestAnimationFrame(fpsLoop);
  })(performance.now());

  // --- DOM ---
  const statusIndicator = document.getElementById('status-indicator');
  const lobby = document.getElementById('lobby');
  const playerList = document.getElementById('player-list');
  const hostControls = document.getElementById('host-controls');
  const roundMinutesInput = document.getElementById('round-minutes'); // –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –º–∏–Ω—É—Ç—ã/—Å–µ–∫
  const roundSecondsInput = document.getElementById('round-seconds'); // —Å–º. –Ω–∏–∂–µ: –µ—Å–ª–∏ —É —Ç–µ–±—è –æ–¥–Ω–æ –ø–æ–ª–µ ‚Äî –ø—Ä–æ—Å—Ç–æ —É–±–µ—Ä–∏ –º–∏–Ω—É—Ç—ã
  const nameInput = document.getElementById('name-input');
  const colorPicker = document.getElementById('color-picker');
  const readyBtn = document.getElementById('ready-btn');
  const startGameBtn = document.getElementById('start-game-btn');
  const gameContainer = document.getElementById('game-container');
  const board = document.getElementById('game-board');
  const scoreboard = document.getElementById('scoreboard');
  const pauseOverlay = document.getElementById('pause-overlay');
  const timerDisplay = document.getElementById('timer');
  
  // Quit modal elements
  const quitBtn = document.getElementById('quit-btn');
  const quitModal = document.getElementById('quit-modal');
  const quitYes = document.getElementById('quit-yes');
  const quitNo = document.getElementById('quit-no');

  // –§–ª–∞–≥, —á—Ç–æ–±—ã Esc –Ω–µ "–º–∏–≥–∞–ª" –º–æ–¥–∞–ª–∫–æ–π
  let quitPromptOpen = false;

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º –≤—ã—Ö–æ–¥–∞
  function openQuitModal() {
    if (quitPromptOpen) return;
    quitPromptOpen = true;
    quitModal.style.display = 'flex';
  }
  
  function closeQuitModal() {
    quitPromptOpen = false;
    quitModal.style.display = 'none';
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  quitBtn.addEventListener('click', openQuitModal);
  quitNo.addEventListener('click', closeQuitModal);
  quitYes.addEventListener('click', () => {
    closeQuitModal();
    socket.emit('quitGame', { by: playerName || 'Unknown' });
  });

  // –ï—Å–ª–∏ —É —Ç–µ–±—è –ø–æ–∫–∞ –æ–¥–∏–Ω `<input type="number" id="round-seconds">` –±–µ–∑ –º–∏–Ω—É—Ç ‚Äî –º–æ–∂–µ—à—å —É–¥–∞–ª–∏—Ç—å roundMinutesInput –∏ —Ñ—É–Ω–∫—Ü–∏—é –Ω–∏–∂–µ.

  // ==== –°–µ—Ç—å ====
  socket.on('connect', () => {
    mySocketId = socket.id;
    updateStatus('connected');
  });
  socket.on('disconnect', () => updateStatus('disconnected'));
  socket.io.on('reconnect_attempt', () => updateStatus('connecting'));

  function updateStatus(status) {
    if (status === 'connected') {
      statusIndicator.style.background = '#43b581';
      statusIndicator.title = 'Connected';
    } else if (status === 'connecting') {
      statusIndicator.style.background = '#faa61a';
      statusIndicator.title = 'Reconnecting...';
    } else {
      statusIndicator.style.background = '#f04747';
      statusIndicator.title = 'Disconnected';
    }
  }

  // –¶–≤–µ—Ç —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º (–µ—Å–ª–∏ –∏–º—è –≤–≤–µ–¥–µ–Ω–æ)
  colorPicker.addEventListener('input', () => {
    const name = nameInput.value.trim();
    const color = colorPicker.value;
    if (name.length > 0) socket.emit('setPlayerInfo', { name, color });
  });

  // –ì–æ—Ç–æ–≤
  readyBtn.addEventListener('click', () => {
    const name = nameInput.value.trim();
    const color = colorPicker.value;
    if (!name) { alert('Please enter your name'); return; }
    playerName = name;
    socket.emit('setPlayerInfo', { name, color }, (res) => {
      if (res.success) {
        socket.emit('setReady');
        readyBtn.disabled = true;
        readyBtn.textContent = '‚è≥ Waiting for others...';
      } else {
        alert(res.message);
      }
    });
  });

  // –•–æ—Å—Ç –º–µ–Ω—è–µ—Ç –≤—Ä–µ–º—è.
  // –í–∞—Ä–∏–∞–Ω—Ç –ê: –º–∏–Ω—É—Ç—ã+—Å–µ–∫—É–Ω–¥—ã
  if (roundMinutesInput && roundSecondsInput) {
    const sendGameTime = () => {
      const m = Number(roundMinutesInput.value) || 0;
      const s = Number(roundSecondsInput.value) || 0;
      let total = m * 60 + s;
      if (total < 15) total = 15;
      socket.emit('setGameTime', total);
    };
    roundMinutesInput.addEventListener('change', sendGameTime);
    roundSecondsInput.addEventListener('change', sendGameTime);
  } else if (roundSecondsInput) {
    // –í–∞—Ä–∏–∞–Ω—Ç B: –æ–¥–Ω–æ –ø–æ–ª–µ —Å–µ–∫—É–Ω–¥
    roundSecondsInput.addEventListener('change', () => {
      const val = Number(roundSecondsInput.value);
      if (Number.isFinite(val)) socket.emit('setGameTime', val);
    });
  }

  // –•–æ—Å—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç
  startGameBtn.addEventListener('click', () => socket.emit('startGame'));

  // –õ–æ–±–±–∏
  socket.on('updateLobby', (data) => {
    const players = data.players;
    currentHostId = data.hostId;
    currentGameTime = data.gameTime ?? currentGameTime;

    lobby.style.display = 'block';
    gameContainer.style.display = 'none';
    pauseOverlay.style.display = 'none';
    paused = false;

    // –í–æ–∑–≤—Ä–∞—Ç –≤ –ª–æ–±–±–∏ ‚Äî –∫–Ω–æ–ø–∫—É —Å–∫—Ä—ã–≤–∞–µ–º –∏ –º–æ–¥–∞–ª–∫—É –∑–∞–∫—Ä—ã–≤–∞–µ–º
    quitBtn.style.display = 'none';
    closeQuitModal();

    const iAmHost = mySocketId === currentHostId;
    if (hostControls) hostControls.style.display = iAmHost ? 'block' : 'none';

    // —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–Ω–ø—É—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏
    if (roundMinutesInput && roundSecondsInput) {
      const mins = Math.floor(currentGameTime / 60);
      const secs = currentGameTime % 60;
      roundMinutesInput.value = mins;
      roundSecondsInput.value = secs;
    } else if (roundSecondsInput) {
      roundSecondsInput.value = currentGameTime;
    }

    playerList.innerHTML = '';
    players.forEach((p) => {
      const isHost = p.id === currentHostId;
      const li = document.createElement('li');
      li.innerHTML = `
        <span style="display:inline-block;width:16px;height:16px;background:${p.color};border:1px solid #000;margin-right:5px;"></span>
        ${p.name} ${isHost ? 'üëë<span style="color:gold;">(Host)</span>' : ''}
        - ${p.ready ? '<span style="color:green;">‚úÖ Ready</span>' : '<span style="color:red;">‚ùå Not ready</span>'}
      `;
      playerList.appendChild(li);
    });

    const allReady = players.length > 0 && players.every(p => p.ready);
    startGameBtn.style.display = (iAmHost && allReady) ? 'inline-block' : 'none';
  });

  // –°—Ç–∞—Ä—Ç
  socket.on('gameStarted', (data) => {
    lobby.style.display = 'none';
    gameContainer.style.display = 'block';
    pauseOverlay.style.display = 'none';
    paused = false;

    // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É Quit —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã
    quitBtn.style.display = 'inline-block';

    board.innerHTML = '';
    for (let i = 0; i < 400; i++) {
      const cell = document.createElement('div');
      cell.classList.add('cell');
      board.appendChild(cell);
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Ä–µ–Ω–¥–µ—Ä-–ø–∞–π–ø–ª–∞–π–Ω
    pending.players = data.players;
    pending.resources = data.resources;
    scheduleRender();
  });

  // –ò–≥—Ä–æ–∫–∏
  socket.on('updatePlayers', (players) => {
    pending.players = players;
    scheduleRender();
  });

  // –†–µ—Å—É—Ä—Å—ã
  socket.on('updateResources', (resources) => {
    if (paused) return;

    // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—Å—Ç–∏–º –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –æ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤ (—á—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞–≤–∞–ª–∏—Å—å —Ö–≤–æ—Å—Ç—ã)
    document.querySelectorAll('.cell.resource').forEach(cell => {
      cell.classList.remove('resource');
      cell.style.backgroundColor = '';
      cell.textContent = '';   // —É–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª
    });

    // –¢–µ–ø–µ—Ä—å –≤—ã—Å—Ç–∞–≤–∏–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
    resources.forEach(res => {
      const idx = res.y * 20 + res.x;
      const cell = board.children[idx];
      if (cell) {
        cell.classList.add('resource');
        cell.style.backgroundColor = res.color || '';
        cell.textContent = res.symbol || ''; // üí∞ ‚ö° üî•
        // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –≤—Å–ø–ª—ã–≤–∞—à–∫–∞
        cell.title = `${res.type} +${res.points}`;
      }
    });
  });


  // –¢–∞–π–º–µ—Ä
  socket.on('updateTimer', (time) => {
    // –æ—Ç–æ–±—Ä–∞–∑–∏–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ mm:ss
    const mm = String(Math.floor(time / 60)).padStart(2, '0');
    const ss = String(time % 60).padStart(2, '0');
    timerDisplay.textContent = `Time: ${mm}:${ss}`;
  });

  // –ö–æ–Ω–µ—Ü –ø–æ —Ç–∞–π–º–µ—Ä—É
  socket.on('gameEnded', (data) => {
    alert(`üèÜ Game Over! Winner: ${data.winner} with ${data.score} points!`);
    location.reload();
  });

  // –ö–æ–Ω–µ—Ü –ø–æ –≤—ã—Ö–æ–¥—É (Esc)
  socket.on('gameQuit', ({ by }) => {
    alert(`‚õî Game was ended by ${by}`);
    location.reload();
  });

  // –ü–∞—É–∑–∞ (—Ç–µ–ø–µ—Ä—å –Ω–∞ P/p)
  socket.on('togglePause', (data) => {
    paused = data.paused;
    pauseOverlay.style.display = 'flex';
    pauseOverlay.textContent = paused
      ? `‚è∏ Paused by ${data.by}`
      : `‚ñ∂Ô∏è Resumed by ${data.by}`;
    if (!paused) setTimeout(() => (pauseOverlay.style.display = 'none'), 1000);
  });

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: P/p ‚Äî –ø–∞—É–∑–∞, Esc ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª–∫—É –≤—ã—Ö–æ–¥–∞ (–±–µ–∑ confirm)
  document.addEventListener('keydown', (e) => {
    if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') return;

    const k = e.key.toLowerCase();

    // –í—ã—Ö–æ–¥ (Esc) - —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
    if (k === 'escape') {
      // –¢–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º, –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º ‚Äî —á—Ç–æ–±—ã Esc –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–ª –µ—ë —Ç—É—Ç –∂–µ
      openQuitModal();
      e.preventDefault();
      return;
    }

    // –ü–∞—É–∑–∞ (P/p)
    if (k === 'p') {
      socket.emit('togglePause', { paused: !paused, by: playerName || 'Unknown' });
      return;
    }

    if (paused || quitPromptOpen) return;

    // –î–≤–∏–∂–µ–Ω–∏–µ
    let direction = null;
    if (k === 'arrowleft' || k === 'a') direction = 'left';
    if (k === 'arrowright' || k === 'd') direction = 'right';
    if (k === 'arrowup' || k === 'w') direction = 'up';
    if (k === 'arrowdown' || k === 's') direction = 'down';

    if (direction) {
      e.preventDefault();
      socket.emit('move', direction);
    }
  });
});
