import { state } from './state.js';
import { KEYS } from './constants.js';
import { emitMove, emitPause } from './net.js';
import { openQuitModal } from './ui.js';

export function bindInput() {
  document.addEventListener('keydown', handleKeyDown);
}

function handleKeyDown(e) {
  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–≤–æ–¥ –≤ –ø–æ–ª—è—Ö
  if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') {
    return;
  }

  const key = e.key.toLowerCase();

  // –í—ã—Ö–æ–¥ —á–µ—Ä–µ–∑ Escape
  if (KEYS.QUIT.includes(key)) {
    openQuitModal();
    e.preventDefault();
    return;
  }

  // –ü–∞—É–∑–∞ —á–µ—Ä–µ–∑ P
  if (KEYS.PAUSE.includes(key)) {
    emitPause(!state.paused, state.playerName || 'Unknown');
    return;
  }

  // –ë–ª–æ–∫–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–∞ –ø–∞—É–∑–µ –∏–ª–∏ –º–æ–¥–∞–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞
  if (state.paused || state.quitModalOpen) {
    return;
  }

  // –î–≤–∏–∂–µ–Ω–∏–µ
  let direction = null;
  if (KEYS.MOVE.LEFT.includes(key)) direction = 'left';
  else if (KEYS.MOVE.RIGHT.includes(key)) direction = 'right';
  else if (KEYS.MOVE.UP.includes(key)) direction = 'up';
  else if (KEYS.MOVE.DOWN.includes(key)) direction = 'down';

  if (direction) {
    e.preventDefault(); // –Ω–µ —Å–∫—Ä–æ–ª–ª–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ñ—Ñ–µ–∫—Ç confusion —É —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    const currentPlayer = state.players && state.players[state.myId];
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞
    if (currentPlayer) {
      console.log(`Player state:`, {
        id: state.myId,
        confusedUntil: currentPlayer.confusedUntil,
        now: Date.now(),
        isConfused: currentPlayer.confusedUntil && Date.now() < currentPlayer.confusedUntil
      });
    } else {
      console.log('‚ùå Current player not found in state.players', { myId: state.myId, players: state.players });
    }
    
    const isConfused = currentPlayer && 
      currentPlayer.confusedUntil && 
      Date.now() < currentPlayer.confusedUntil;
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if (isConfused) {
      console.log(`üîÑ CONFUSION ACTIVE! Original: ${direction}`);
    }
    
    // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –∑–∞–ø—É—Ç–∞–Ω, —Ä–µ–≤–µ—Ä—Å–∏—Ä—É–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    if (isConfused) {
      const originalDirection = direction;
      switch (direction) {
        case 'left': direction = 'right'; break;
        case 'right': direction = 'left'; break;
        case 'up': direction = 'down'; break;
        case 'down': direction = 'up'; break;
      }
      console.log(`üîÑ Direction reversed: ${originalDirection} ‚Üí ${direction}`);
    }
    
    emitMove(direction);
  }
}
