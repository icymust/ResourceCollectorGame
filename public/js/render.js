import { state } from "./state.js";
import { GRID } from "./constants.js";
import { audioManager } from "./audio.js";

// –†–µ–Ω–¥–µ—Ä-–ø–∞–π–ø–ª–∞–π–Ω
let pending = { players: null, resources: null };
let scheduled = false;

const prevPlayerIndex = new Map(); // id -> –∏–Ω–¥–µ–∫—Å –∫–ª–µ—Ç–∫–∏ (y*20 + x)
const resourceSet = new Set(); // "x,y" –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

let board = null;
let scoreboard = null;
let lastResourceCount = 0; // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
let effectUpdateInterval = null; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤

export function initBoard() {
  board = document.getElementById("game-board");
  scoreboard = document.getElementById("scoreboard");

  // –°–æ–∑–¥–∞—ë–º 400 –∫–ª–µ—Ç–æ–∫
  board.innerHTML = "";
  for (let i = 0; i < GRID.TOTAL_CELLS; i++) {
    const cell = document.createElement("div");
    cell.classList.add("cell");
    board.appendChild(cell);
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
  startEffectUpdates();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
function startEffectUpdates() {
  // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
  if (effectUpdateInterval) {
    clearInterval(effectUpdateInterval);
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
  effectUpdateInterval = setInterval(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–≥—Ä–æ–∫–∏ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
    const players = state.players || {};
    const hasActiveEffects = Object.values(players).some(player => 
      (player.doublePointsUntil && Date.now() < player.doublePointsUntil) ||
      (player.magnetUntil && Date.now() < player.magnetUntil) ||
      (player.frozenUntil && Date.now() < player.frozenUntil) ||
      (player.confusedUntil && Date.now() < player.confusedUntil) ||
      (player.poisonedUntil && Date.now() < player.poisonedUntil) ||
      (player.ghostModeUntil && Date.now() < player.ghostModeUntil)
    );
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã, –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if (hasActiveEffects) {
      pending.players = players;
      scheduleRender();
    }
  }, 1000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
}

export function scheduleRender() {
  if (scheduled) return;
  scheduled = true;
  requestAnimationFrame(() => {
    scheduled = false;
    renderFrame();
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∏–≥—Ä–æ–∫–∞
function getPlayerEffects(player) {
  const effects = [];
  const now = Date.now();
  
  if (player.doublePointsUntil && now < player.doublePointsUntil) {
    const remaining = Math.ceil((player.doublePointsUntil - now) / 1000);
    effects.push({
      class: 'double-points',
      icon: '‚ú®',
      text: '2x',
      tooltip: `Double points for ${remaining}s`,
      color: '#333',
      background: 'linear-gradient(45deg, #FFE55C, #FFD700)',
      border: '#FFD700'
    });
  }
  
  if (player.magnetUntil && now < player.magnetUntil) {
    const remaining = Math.ceil((player.magnetUntil - now) / 1000);
    effects.push({
      class: 'magnet-effect',
      icon: 'üß≤',
      text: 'MAG',
      tooltip: `Magnet effect for ${remaining}s`,
      color: 'white',
      background: 'linear-gradient(45deg, #FF4444, #CC3333)',
      border: '#FF4444'
    });
  }
  
  if (player.frozenUntil && now < player.frozenUntil) {
    const remaining = Math.ceil((player.frozenUntil - now) / 1000);
    effects.push({
      class: 'frozen-effect',
      icon: 'üßä',
      text: 'FRZ',
      tooltip: `Frozen for ${remaining}s`,
      color: 'white',
      background: 'linear-gradient(45deg, #00BFFF, #0099CC)',
      border: '#00BFFF'
    });
  }
  
  if (player.confusedUntil && now < player.confusedUntil) {
    const remaining = Math.ceil((player.confusedUntil - now) / 1000);
    effects.push({
      class: 'confused-effect',
      icon: 'üòµ',
      text: 'CNF',
      tooltip: `Confused controls for ${remaining}s`,
      color: 'white',
      background: 'linear-gradient(45deg, #FF69B4, #CC1493)',
      border: '#FF69B4'
    });
  }
  
  if (player.poisonedUntil && now < player.poisonedUntil) {
    const remaining = Math.ceil((player.poisonedUntil - now) / 1000);
    effects.push({
      class: 'poisoned-effect',
      icon: '‚ò£Ô∏è',
      text: 'PSN',
      tooltip: `Poisoned for ${remaining}s (-1 HP/2s)`,
      color: 'white',
      background: 'linear-gradient(45deg, #32CD32, #228B22)',
      border: '#32CD32'
    });
  }
  
  if (player.ghostModeUntil && now < player.ghostModeUntil) {
    const remaining = Math.ceil((player.ghostModeUntil - now) / 1000);
    effects.push({
      class: 'ghost-mode-effect',
      icon: 'üëª',
      text: 'GHOST',
      tooltip: `Ghost Mode for ${remaining}s (Other players invisible)`,
      color: 'white',
      background: 'linear-gradient(45deg, #9966CC, #6633AA)',
      border: '#9966CC'
    });
  }
  
  return effects;
}

function renderFrame() {
  // –ò–≥—Ä–æ–∫–∏: —Ç–æ–ª—å–∫–æ –¥–∏—Ñ—Ñ –ø–æ–∑–∏—Ü–∏–π
  if (pending.players) {
    // —Å–Ω—è—Ç—å –ø—Ä–æ—à–ª—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    for (const [id, oldIdx] of prevPlayerIndex) {
      const oldCell = board.children[oldIdx];
      if (oldCell) {
        oldCell.classList.remove("player");
        oldCell.classList.remove("double-points"); // –£–±–∏—Ä–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –¥–≤–æ–π–Ω—ã—Ö –æ—á–∫–æ–≤
        oldCell.classList.remove("magnet-effect"); // –£–±–∏—Ä–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –º–∞–≥–Ω–∏—Ç–∞
        oldCell.classList.remove("frozen-effect"); // –£–±–∏—Ä–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –∑–∞–º–æ—Ä–æ–∑–∫–∏
        oldCell.classList.remove("confused-effect"); // –£–±–∏—Ä–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø—É—Ç–∞–Ω–∏—Ü—ã
        oldCell.classList.remove("poisoned-effect"); // –£–±–∏—Ä–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –æ—Ç—Ä–∞–≤–ª–µ–Ω–∏—è
        oldCell.classList.remove("ghost-mode-effect"); // –£–±–∏—Ä–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏–∑—Ä–∞—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        // –ù–µ –æ—á–∏—â–∞–µ–º backgroundColor, –µ—Å–ª–∏ –Ω–∞ —ç—Ç–æ–π –∫–ª–µ—Ç–∫–µ –µ—Å—Ç—å —Ä–µ—Å—É—Ä—Å
        if (!oldCell.classList.contains("resource")) {
          oldCell.style.backgroundColor = "";
        }
        oldCell.title = "";
      }
    }
    prevPlayerIndex.clear();

    // –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ
    Object.values(pending.players).forEach((p) => {
      const idx = p.y * GRID.COLS + p.x;
      const cell = board.children[idx];
      if (cell) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º Ghost Mode - –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª Ghost Mode, —Ç–æ —è –Ω–µ –≤–∏–∂—É –°–ï–ë–Ø
        const playersWithGhostMode = Object.values(pending.players).filter(player => 
          player.id !== state.myId && // –Ω–µ —è
          player.ghostModeUntil && 
          Date.now() < player.ghostModeUntil
        );
        
        const shouldHideMyself = playersWithGhostMode.length > 0 && p.id === state.myId;
        
        // –ï—Å–ª–∏ –¥—Ä—É–≥–æ–π –∏–≥—Ä–æ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª Ghost Mode –∏ —ç—Ç–æ –º–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂ - —Å–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—è
        if (shouldHideMyself) {
          // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å player –∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–µ–≥–æ –∏–≥—Ä–æ–∫–∞
          prevPlayerIndex.set(p.id, idx);
          return;
        }
        
        cell.classList.add("player");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        const effects = getPlayerEffects(p);
        const hasDoublePoints = effects.some(effect => effect.class === 'double-points');
        const hasMagnet = effects.some(effect => effect.class === 'magnet-effect');
        const isFrozen = effects.some(effect => effect.class === 'frozen-effect');
        const isConfused = effects.some(effect => effect.class === 'confused-effect');
        const isPoisoned = effects.some(effect => effect.class === 'poisoned-effect');
        const hasGhostMode = effects.some(effect => effect.class === 'ghost-mode-effect');        if (hasDoublePoints) {
          cell.classList.add("double-points");
        } else {
          cell.classList.remove("double-points");
        }
        
        if (hasMagnet) {
          cell.classList.add("magnet-effect");
        } else {
          cell.classList.remove("magnet-effect");
        }
        
        if (isFrozen) {
          cell.classList.add("frozen-effect");
        } else {
          cell.classList.remove("frozen-effect");
        }
        
        if (isConfused) {
          cell.classList.add("confused-effect");
        } else {
          cell.classList.remove("confused-effect");
        }
        
        if (isPoisoned) {
          cell.classList.add("poisoned-effect");
        } else {
          cell.classList.remove("poisoned-effect");
        }
        
        if (hasGhostMode) {
          cell.classList.add("ghost-mode-effect");
        } else {
          cell.classList.remove("ghost-mode-effect");
        }
        
        cell.style.backgroundColor = p.color;
        // –ï—Å–ª–∏ –Ω–∞ –∫–ª–µ—Ç–∫–µ –µ—Å—Ç—å —Ä–µ—Å—É—Ä—Å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –æ–± –∏–≥—Ä–æ–∫–µ, –∏ –æ —Ä–µ—Å—É—Ä—Å–µ
        if (cell.classList.contains("resource")) {
          const effectTexts = [];
          if (hasDoublePoints) effectTexts.push("2x –æ—á–∫–æ–≤");
          if (hasMagnet) effectTexts.push("–º–∞–≥–Ω–∏—Ç");
          if (isFrozen) effectTexts.push("–∑–∞–º–æ—Ä–æ–∂–µ–Ω");
          if (isConfused) effectTexts.push("–∑–∞–ø—É—Ç–∞–Ω");
          if (isPoisoned) effectTexts.push("–æ—Ç—Ä–∞–≤–ª–µ–Ω");
          if (hasGhostMode) effectTexts.push("–ø—Ä–∏–∑—Ä–∞—á–Ω—ã–π —Ä–µ–∂–∏–º");
          const effectText = effectTexts.length ? ` [${effectTexts.join(', ')}!]` : "";
          cell.title = `${p.name}${effectText} (–Ω–∞ —Ä–µ—Å—É—Ä—Å–µ: ${cell.title.split(' (+')[0]})`;
        } else {
          const effectTexts = [];
          if (hasDoublePoints) effectTexts.push("2x –æ—á–∫–æ–≤");
          if (hasMagnet) effectTexts.push("–º–∞–≥–Ω–∏—Ç");
          if (isFrozen) effectTexts.push("–∑–∞–º–æ—Ä–æ–∂–µ–Ω");
          if (isConfused) effectTexts.push("–∑–∞–ø—É—Ç–∞–Ω");
          if (isPoisoned) effectTexts.push("–æ—Ç—Ä–∞–≤–ª–µ–Ω");
          if (hasGhostMode) effectTexts.push("–ø—Ä–∏–∑—Ä–∞—á–Ω—ã–π —Ä–µ–∂–∏–º");
          const effectText = effectTexts.length ? ` [${effectTexts.join(', ')}!]` : "";
          cell.title = p.name + effectText;
        }
        prevPlayerIndex.set(p.id, idx);
      }
    });

    // —Ç–∞–±–ª–æ (–æ–¥–Ω–∏–º innerHTML –∑–∞ –∫–∞–¥—Ä)
    scoreboard.innerHTML =
      "<div style='font-size:18px;font-weight:bold;color:white;text-align:center;margin-bottom:12px;text-shadow: 0 2px 4px rgba(0,0,0,0.5);border-bottom:2px solid rgba(255,255,255,0.3);padding-bottom:8px;'>üèÜ Scores</div>" +
      Object.values(pending.players)
        .map((p) => {
          // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –∏–≥—Ä–æ–∫–∞
          const effects = getPlayerEffects(p);
          
          // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏
          const effectsText = effects.map(effect => 
            ` <span class="effect-icon" style="color:${effect.color};background:${effect.background};border:1px solid ${effect.border};" title="${effect.tooltip}">${effect.icon} ${effect.text}</span>`
          ).join('');
          
          return `
          <div style="margin-bottom: 10px; padding: 8px 6px; border-bottom: 1px solid rgba(255,255,255,0.2); background: rgba(255,255,255,0.1); border-radius: 6px;">
            <span style="display:inline-block;width:19px;height:16px;background:${p.color};border:2px solid rgba(255,255,255,0.8);margin-right:10px;border-radius:3px;box-shadow:0 2px 4px rgba(0,0,0,0.3);"></span>
            <strong style="font-size:16px;color:white;text-shadow: 0 1px 2px rgba(0,0,0,0.5);">${p.name}:</strong> <span style="font-weight:bold;color:#FFE55C;font-size:16px;text-shadow: 0 1px 2px rgba(0,0,0,0.5);">${p.score}</span>${effectsText}
          </div>
        `;
        })
        .join("");  // –£–±—Ä–∞–ª–∏ <br> —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º div-—ã

    pending.players = null; // –æ—Ç—Ä–∏—Å–æ–≤–∞–ª–∏ ‚Äî —Å–±—Ä–æ—Å–∏–ª–∏
  }

  // –†–µ—Å—É—Ä—Å—ã: –¥–∏—Ñ—Ñ –ø–æ –º–Ω–æ–∂–µ—Å—Ç–≤—É
  if (pending.resources) {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ä–µ—Å—É—Ä—Å–æ–≤
    lastResourceCount = pending.resources.length;

    // —É–±—Ä–∞—Ç—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ
    const nextSet = new Set(pending.resources.map((r) => `${r.x},${r.y}`));
    if (resourceSet.size) {
      for (const key of resourceSet) {
        if (!nextSet.has(key)) {
          const [x, y] = key.split(",").map(Number);
          const idx = y * GRID.COLS + x;
          const cell = board.children[idx];
          if (cell) {
            cell.classList.remove("resource");
            cell.classList.remove("being-attracted"); // –£–±–∏—Ä–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏—Ç—è–∂–µ–Ω–∏—è
            cell.classList.remove("bomb-resource"); // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –±–æ–º–±—ã
            cell.textContent = "";
            
            // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—Ç–∏–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –æ—Å—Ç–∞—Ç—å—Å—è –æ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤
            cell.style.border = "";
            cell.style.boxShadow = "";
            
            // –ï—Å–ª–∏ –Ω–∞ –∫–ª–µ—Ç–∫–µ –µ—Å—Ç—å –∏–≥—Ä–æ–∫, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ —Ü–≤–µ—Ç –∏ title
            if (cell.classList.contains("player")) {
              // –ù–∞–π–¥–µ–º –∏–≥—Ä–æ–∫–∞ –Ω–∞ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
              const currentPlayers = state.players || {};
              const playerOnCell = Object.values(currentPlayers).find(p => 
                p.x === x && p.y === y
              );
              if (playerOnCell) {
                cell.style.backgroundColor = playerOnCell.color;
                cell.title = playerOnCell.name;
              }
            } else {
              // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç, –æ—á–∏—â–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é
              cell.style.backgroundColor = "";
              cell.title = "";
            }
          }
        }
      }
    }

    // –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ
    for (const resource of pending.resources) {
      const key = `${resource.x},${resource.y}`;
      if (!resourceSet.has(key)) {
        const idx = resource.y * GRID.COLS + resource.x;
        const cell = board.children[idx];
        if (cell) {
          cell.classList.add("resource");
          
          // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –±–æ–º–± - –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω
          if (resource.type === 'timeBomb') {
            cell.style.backgroundColor = ""; // –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω –¥–ª—è –±–æ–º–±—ã
            cell.classList.add('bomb-resource'); // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –±–æ–º–±
            cell.title = `üí£ Time Bomb (+${resource.points || 4} –æ—á–∫–æ–≤ –∑–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é! –†–ò–°–ö: -3 –æ—á–∫–∞ –ø—Ä–∏ –≤–∑—Ä—ã–≤–µ)`;
            cell.textContent = resource.symbol || "üí£"; // –°–∏–º–≤–æ–ª –±–æ–º–±—ã
          } else if (resource.type === 'freezeTrap') {
            // –î–µ–ª–∞–µ–º –ª–æ–≤—É—à–∫—É –∑–∞–º–æ—Ä–æ–∑–∫–∏ –≤–∏–¥–∏–º–æ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            // cell.style.backgroundColor = resource.color || "#00BFFF"; // –ì–æ–ª—É–±–æ–π —Ñ–æ–Ω
            // cell.style.border = "2px solid #87CEEB"; // –õ–µ–¥—è–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞
            // cell.style.boxShadow = "0 0 10px rgba(0, 191, 255, 0.5)"; // –õ–µ–¥—è–Ω–æ–µ —Å–≤–µ—á–µ–Ω–∏–µ
            // cell.textContent = resource.symbol || "üßä"; // –°–∏–º–≤–æ–ª –ª—å–¥–∞
            // cell.title = `‚ùÑÔ∏è Freeze Trap (–∑–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ—Ç –Ω–∞ 4 —Å–µ–∫—É–Ω–¥—ã!)`; // –ü–æ–¥—Å–∫–∞–∑–∫–∞
            cell.textContent = ""; // –£–±–∏—Ä–∞–µ–º –ª—é–±–æ–π —Å–∏–º–≤–æ–ª
            cell.title = ""; // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            cell.style.backgroundColor = "transparent"; // –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
            cell.style.border = "none"; // –ë–µ–∑ –≥—Ä–∞–Ω–∏—Ü
            cell.style.boxShadow = "none"; // –ë–µ–∑ —Å–≤–µ—á–µ–Ω–∏—è
          } else if (resource.type === 'poisonTrap') {
            // –î–µ–ª–∞–µ–º —è–¥–æ–≤–∏—Ç—É—é –ª–æ–≤—É—à–∫—É –Ω–µ–≤–∏–¥–∏–º–æ–π
            cell.textContent = ""; // –£–±–∏—Ä–∞–µ–º –ª—é–±–æ–π —Å–∏–º–≤–æ–ª
            cell.title = ""; // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            cell.style.backgroundColor = "transparent"; // –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
            cell.style.border = "none"; // –ë–µ–∑ –≥—Ä–∞–Ω–∏—Ü
            cell.style.boxShadow = "none"; // –ë–µ–∑ —Å–≤–µ—á–µ–Ω–∏—è
          } else if (resource.type === 'confusionTrap') {
            // –î–µ–ª–∞–µ–º –ª–æ–≤—É—à–∫—É –ø—É—Ç–∞–Ω–∏—Ü—ã –Ω–µ–≤–∏–¥–∏–º–æ–π
            cell.textContent = ""; // –£–±–∏—Ä–∞–µ–º –ª—é–±–æ–π —Å–∏–º–≤–æ–ª
            cell.title = ""; // –£–±–∏—Ä–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            cell.style.backgroundColor = "transparent"; // –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
            cell.style.border = "none"; // –ë–µ–∑ –≥—Ä–∞–Ω–∏—Ü
            cell.style.boxShadow = "none"; // –ë–µ–∑ —Å–≤–µ—á–µ–Ω–∏—è
          } else {
            cell.classList.remove('bomb-resource'); // –£–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å –±–æ–º–±—ã
            cell.style.backgroundColor = resource.color || "#FFD700";
            cell.title = `${resource.type || "Resource"} (+${
              resource.points || 1
            } points)`;
            cell.textContent = resource.symbol || "‚óè"; // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
          }
        }
      } else {
        // –†–µ—Å—É—Ä—Å—ã —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–µ—Ç –Ω—É–∂–¥—ã –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö
      }
    }
    resourceSet.clear();
    pending.resources.forEach((r) => resourceSet.add(`${r.x},${r.y}`));
    pending.resources = null;
  }
}

// API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
export function updatePlayers(players) {
  pending.players = players;
  scheduleRender();
}

export function updateResources(resources) {
  if (state.paused) return;
  pending.resources = resources;
  scheduleRender();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∏–≥—Ä—ã)
export function cleanup() {
  if (effectUpdateInterval) {
    clearInterval(effectUpdateInterval);
    effectUpdateInterval = null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤–∑—Ä—ã–≤–∞ –±–æ–º–±—ã
export function showBombExplosion(x, y) {
  const idx = y * GRID.COLS + x;
  const cell = board.children[idx];
  if (cell) {
    // –°–æ–∑–¥–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç –≤–∑—Ä—ã–≤–∞
    const explosion = document.createElement('div');
    explosion.innerHTML = 'üí•';
    explosion.style.cssText = `
      position: absolute;
      font-size: 40px;
      z-index: 1000;
      pointer-events: none;
      animation: explosionEffect 1s ease-out forwards;
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –≤–∑—Ä—ã–≤–∞ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if (!document.querySelector('#explosion-styles')) {
      const styles = document.createElement('style');
      styles.id = 'explosion-styles';
      styles.textContent = `
        @keyframes explosionEffect {
          0% {
            transform: scale(0.5);
            opacity: 1;
          }
          50% {
            transform: scale(2);
            opacity: 0.8;
          }
          100% {
            transform: scale(3);
            opacity: 0;
          }
        }
      `;
      document.head.appendChild(styles);
    }
    
    // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –≤–∑—Ä—ã–≤ –ø–æ —Ü–µ–Ω—Ç—Ä—É –∫–ª–µ—Ç–∫–∏
    const cellRect = cell.getBoundingClientRect();
    const gameBoard = document.getElementById('game-board');
    const boardRect = gameBoard.getBoundingClientRect();
    
    explosion.style.left = (cellRect.left - boardRect.left + cellRect.width/2 - 20) + 'px';
    explosion.style.top = (cellRect.top - boardRect.top + cellRect.height/2 - 20) + 'px';
    
    gameBoard.appendChild(explosion);
    
    // –£–¥–∞–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
    setTimeout(() => {
      if (explosion.parentNode) {
        explosion.parentNode.removeChild(explosion);
      }
    }, 1000);
  }
}
